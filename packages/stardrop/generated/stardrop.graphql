# A character's family relation.
type FamilyRelation {
  # The name of the family member.
  key: VillagersEnum!

  # How the villager is related.
  relation: String!
}

# The locations a villager can live.
enum LivesInEnum {
  CindersapForest
  GingerIsland
  PelicanTown
  TheBeach
  TheDesert
  TheMines
  TheMountain
  TheSewers
}

type Query {
  # Get details on a Stardew valley character.
  getFuzzyVillagerByName(
    # When fuzzy searching, this is the amount of villagers to return.
    take: Float

    # The name of the villager to look up.
    villager: String!
  ): [Villager!]!

  # Get details on a Stardew valley character.
  getVillagerByName(
    # When fuzzy searching, this is the amount of villagers to return.
    take: Float

    # The name of the villager to look up.
    villager: String!
  ): Villager!
}

# A character's data.
type Villager {
  # The address of the villager.
  address: String!

  # The best gifts to gift to this villager.
  bestGifts: [String!]!

  # The birthday of the villager.
  birthday: String!

  # A description of the villager.
  description: String

  # The family of the villager.
  family: [FamilyRelation!]!

  # The friends of the villager.
  friends: [VillagersEnum!]!

  # The name of the villager and the key by which it's stored.
  key: VillagersEnum!

  # The location the villager lives in.
  livesIn: LivesInEnum!

  # If you are able to marry this villager.
  marriage: Boolean!

  # The portrait of the villager.
  portrait: String
}

# The villagers in the API.
enum VillagersEnum {
  abigail
  alex
  caroline
  clint
  demetrius
  dwarf
  elliott
  emily
  evelyn
  george
  gus
  haley
  harvey
  jas
  jodi
  kent
  krobus
  leah
  leo
  lewis
  linus
  marnie
  maru
  pam
  penny
  pierre
  robin
  sam
  sandy
  sebastian
  shane
  vincent
  willy
  wizard
}
