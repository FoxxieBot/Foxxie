const { emojis: { infinity, perms: { notSpecified, granted, denied }, covid: { cases, tests, deaths, recoveries }, weather: { temperature, date, humidity, winds, feels, timezone, dayCurrent } }, credits: { developer, spanishTranslation, additionalHelp } } = require('../../lib/util/constants');
const { topggURL, supportServer, inviteURL, version, commands, aliases } = require('../../config/foxxie')
const { toUpperCaseFirst } = require('../../lib/util/util');

module.exports = {

    name: 'en-US',
        DEFAULT: key => `${key} has not been localized for en-US yet.`,
        PREFIX_REMINDER: (prefix, prefixes) => `**Heya!** My prefixes for this guild are ${prefix} and \`${prefixes}\`. Try out \`fox help\` to get a list of my commands and categories.`,

        MESSAGE_CANCELLED: `Command **cancelled**.`,
        MESSAGE_LOADING: `${infinity} **Alright, I'm taking your order.** This may take a few seconds.`,

        // Responders
        RESPONDER_ERROR_CODE: `**Uh oh,** there seems to be some sort of problem with my source code. Now don't worry I'm not dying on ya but I'd appreciate it if you did \`fox bugreport [bug]\` to send a message to my developer about it.`,
        RESPONDER_ERROR_PERMS_CLIENT: perm => `I don't have the correct permissions to run this command! I need the \`${perm}\` permission in this channel. As an alternative you can give my role the \`ADMINISTRATOR\` permission to bypass this issue.`,
        RESPONDER_FOXXIE_CUBBY_WRONG_CHANNEL: msg => `${msg.member}, this channel **isnt** meant to test out my commands. For that, you should head over to <#825896913810358274>.`,

        // Dev Commands
        COMMAND_CREATEKEY_DESCRIPTION: `Creates a key that a user can redeem for a profile badge. Currently five valid ids: \`0\` Developer Ruff, \`1\` Foxxie Contributor, \`2\` Cutiepie. This command can only be used by the bot owner due to it's special nature.`,
        COMMAND_CREATEKEY_NOID: `**Hey,** you either didn't provide an Id or the Id provided is invalid. The current valid Ids are \`0 - 2\`.`,
        COMMAND_CREATEKEY_SUCCESS: (badges, id, out) => `**Success!** here is a key for ${badges[id].icon} ${badges[id].name}: \`${out.join('-')}\`.`,
        COMMAND_EVAL_DESCRIPTION: `Allows ya to evaluate JavaScript code straight from Discord. This command also takes advantage of my flags feature add \`-s\` or \`-silent\` to a message to prevent me from displaying the output. Add \`-a\` or \`-async\` to the message to wrap the given code inside of an asynchronous function. This command can only be used by developers because of the power it has.`,
        COMMAND_EVAL_OUTPUT: `**Output**:`,
        COMMAND_EVAL_OVER: `Characters over 2000!`,
        COMMAND_EVAL_TOKEN: `Token Detected`,
        COMMAND_EVAL_TYPE: `**Type**:`,
        COMMAND_EVAL_UNDEFINED: `Undefined`,
        COMMAND_RELOAD_COMMAND_ERROR: (name, err) => `**Error** reloading command **${name}**, \`\`\`js\n${err}\n\`\`\``,
        COMMAND_RELOAD_COMMAND_SUCCESS: (name, time) => `**Successfully** reloaded command **${name}**, (took ${time}μs)`,
        COMMAND_RELOAD_DESCRIPTION: `Allows you to reload a specific \`command\`, \`monitor\`, or \`language\` without having to restart the bot. This command is locked to the bot developer due to it's special nature.`,
        COMMAND_RELOAD_LANGUAGE_ERROR: (name, err) => `**Error** reloading language **${name}**, \`\`\`js\n${err}\n\`\`\``,
        COMMAND_RELOAD_LANGUAGE_SUCCESS: (name, time) => `**Successfully** reloaded language **${name}**, (took ${time}μs)`,
        COMMAND_RELOAD_MONITOR_ERROR: (name, err) => `**Error** reloading monitor **${name}**, \`\`\`js\n${err}\n\`\`\``,
        COMMAND_RELOAD_MONITOR_SUCCESS: (name, time) => `**Successfully** reloaded monitor **${name}**, (took ${time}μs)`,
        COMMAND_RELOAD_NOARGS: `Please specify **one command** or **monitor** to reload.`,
        COMMAND_RELOAD_NOEXIST: (name) => `**Sorry,** \`${name}\` doesn't appear to be a valid command, monitor, or language.`,
        COMMAND_SERVERLIST_DESCRIPTION: ``,
        COMMAND_SERVERLIST_EMBED_FOOTER: (size, page, totalPages) => `${size} total servers\nPage - ${page}/${totalPages}`,
        COMMAND_SERVERLIST_EMBED_TITLE: `Servers using Foxxie`,
        COMMAND_SERVERLIST_MEMBERCOUNT: `members`,

        // Fun Commands
        COMMAND_CAT_DESCRIPTION: `Sends me to get you a random picture of a cat from https://api.thecatapi.com`,
        COMMAND_CAT_TITLE: `Random Cat:`,
        COMMAND_CAT_FOOTER: `From api.thecatapi.com`,
        COMMAND_DOG_DESCRIPTION: `Sends me to get you a random picture of a dog from https://dog.ceo/api`,
        COMMAND_DOG_TITLE: `Random Dog:`,
        COMMAND_DOG_FOOTER: `From dog.ceo/api`,
        COMMAND_FOX_DESCRIPTION: `I'll go and get you a picture of one of my family members from https://randomfox.ca`,
        COMMAND_FOX_TITLE: `Random Fox:`,
        COMMAND_FOX_FOOTER: `From randomfox.ca/floof`,
        COMMAND_FOXFACT_DESCRIPTION: `I'll provide you with a cool fact about foxes from https://some-random-api.ml/facts/fox`,
        COMMAND_FOXFACT_NOFACT: `**Whoops,** there was some sort of error while fetching your fact, do try again please.`,
        COMMAND_POKEMON_DESCRIPTION: `I'll provide you with some stats about a pokemon you specify. This command also uses my flags feature, add \`-s\` or \`-shiny\` after the pokemon for me to show it's shiny sprite instead of the normal.`,
        COMMAND_POKEMON_FIELD_ATTACK: `**Attack**`,
        COMMAND_POKEMON_FIELD_BASEXP: `**Base Exp**`,
        COMMAND_POKEMON_FIELD_DEFENSE: `**Defense**`,
        COMMAND_POKEMON_FIELD_HEIGHT: `**Height**`,
        COMMAND_POKEMON_FIELD_SPECIALATTK: `**Special Atk**`,
        COMMAND_POKEMON_FIELD_SPECIALDEF: `**Special Def**`,
        COMMAND_POKEMON_FIELD_SPEED: `**Speed**`,
        COMMAND_POKEMON_FIELD_TYPE: `**Type**`,
        COMMAND_POKEMON_FIELD_WEIGHT: `**Weight**`,
        COMMAND_POKEMON_INVALIDPOKEMON: `**Hey,** that Pokemon is invalid! How bout an actual one this time oki?`,
        COMMAND_POKEMON_NOPOKEMON: `**Cmon,** you gotta enter a pokemon for me to show.`,
        COMMAND_TOPIC_DESCRIPTION: `I'll get you a random conversation starter for when your chat starts to doze off. Powered by https://www.conversationstarters.com`,
        COMMAND_URBAN_DESCRIPTION: `I'll get you data from an urban dictionary word you provide, including link, upvotes, definition, and examples.`,
        COMMAND_URBAN_EXAMPLE: `**Example**`,
        COMMAND_URBAN_FOOTER: res => `By ${res[0].data.list[3].author}`,
        COMMAND_URBAN_NODATA: `**Yikes,** sorry I couldn't find any data for that word.`,
        COMMAND_URBAN_NODEFINITION: `No definition available.`,
        COMMAND_URBAN_NOEXAMPLE: `No example available.`,
        COMMAND_URBAN_NOWORD: `**Okay,** how do you expect me to define a word if you don't provide one?`,

        // Moderation Commands
        COMMAND_CLEARWARN_CONFIRM: `**Hey,** are you sure you want to clear all warnings for this member?`,
        COMMAND_CLEARWARN_DESCRIPTION: `Remove or clear warnings for the specified user. Specify a warn Id to clear that specific warning, or specify \`all\` to clear all warnings for that user.\nWarnings and their Id's can be seen with the \`info\` command.`,
        COMMAND_CLEARWARN_NOWARNINGS: `**Sorry,** this member currently has **no warnings** to clear.`,
        COMMAND_CLEARWARN_NOMEMBER: `**Hey,** you need to specify **one member** to clear warnings for.`,
        COMMAND_CLEARWARN_INVALIDWARNID: `**Whoops,** the warn ID you provided doesn't exist for this member.`,
        COMMAND_LOCK_ALREADY: `**Whoops,** this channel is already locked.`,
        COMMAND_LOCK_DESCRIPTION: `Lets you lock a channel in the event of a raid or downtime. Although this command only updates the @everyone permission, so if you have a role that grants permissions to \`SEND_MESSAGES\` users with that role will still be able to speak.`,
        COMMAND_LOCK_LOCKING: `${infinity} **Locking** up the channel...`,
        COMMAND_LOCK_SUCCESS: `**Successfully** locked up the channel for ya.`,
        COMMAND_STAFFLOG_BAN: ban => `${notSpecified} Issued ${ban.toLocaleString()} **ban${ban > 1 ? `s` : ``}**`,
        COMMAND_STAFFLOG_DESCRIPTION: `Shows the stats of how many times you or a specific user has performed a moderation command on this server.`,
        COMMAND_STAFFLOG_JAIL: jail => `${notSpecified} Issued ${jail.toLocaleString()} **jail${jail>1?`s`:``}**`,
        COMMAND_STAFFLOG_KICK: kick => `${notSpecified} Issued ${kick.toLocaleString()} **kick${kick>1?`s`:``}**`,
        COMMAND_STAFFLOG_LOCK: lock => `${notSpecified} Performed ${lock.toLocaleString()} **lock${lock>1?`s`:``}**`,
        COMMAND_STAFFLOG_MUTE: mute => `${notSpecified} Issued ${mute.toLocaleString()} **mute${mute>1?`s`:``}**`,
        COMMAND_STAFFLOG_NONE: `**Sorry,** this user hasn't performed any moderation actions in this server.`,
        COMMAND_STAFFLOG_NUKE: nuke => `${notSpecified} Performed ${nuke.toLocaleString()} **nuke${nuke>1?`s`:``}**`,
        COMMAND_STAFFLOG_PURGE: (purge, total) => `${notSpecified} Performed ${purge.toLocaleString()} **purge${purge>1?`s`:``}** (**${total.toLocaleString()}** message${total>1?`s`:``})`,
        COMMAND_STAFFLOG_SLOWMODE: slowmode => `${notSpecified} Performed ${slowmode.toLocaleString()} **slowmode${slowmode>1?`s`:``}**`,
        COMMAND_STAFFLOG_TITLE: user => `__Moderation logs for **${user}**:__\n\n`,
        COMMAND_STAFFLOG_UNLOCK: unlock => `${notSpecified} Performed ${unlock.toLocaleString()} **unlock${unlock>1?`s`:``}**`,
        COMMAND_STAFFLOG_WARN: warn => `${notSpecified} Issued ${warn.toLocaleString()} **warn${warn>1?`s`:``}**`,
        COMMAND_VCKICK_DESCRIPTION: `Disconnects the specified user from a voice channel if they are in one. If a moderation logging channel is set, this action will log there.`,
        COMMAND_VCKICK_NOMEMBER: `You need to specify **one member** to kick from a vc.`,
        COMMAND_VCKICK_NOVOICE: `**Hey,** the user you specified is not currently in a vc.`,
        COMMAND_VCMUTE_ALREADY_MUTED: `**Whoops,** this member is already server muted.`,
        COMMAND_VCMUTE_DESCRIPTION: `Server mutes the specified member in a v cso they can no longer talk.`,
        COMMAND_VCMUTE_NOMEMBER: `You need to specify **one member** vcmute.`,
        COMMAND_VCMUTE_NOVOICE: `**Hey,** looks like the member you're trying to vcmute isn't even in a vc.`,

        // Roleplay Commands
        COMMAND_ANGRY_DESCRIPTION: `Get angry at someone (ಠ_ಠ)`,
        COMMAND_ANGRY_FOOTER: (sender, reciever, authNum, recNum) => `${sender} got angry ${authNum} times, and ${reciever} made others angry ${recNum} times`,
        COMMAND_ANGRY_MULTIPLE: (sender, reciever) => `**${sender}** got angry because of **${reciever}**`,
        COMMAND_ANGRY_SELF: `is angry`,
        COMMAND_ANGRY_SINGLE: (sender, reciever) => `**${sender}** is angry with **${reciever}**`,
        COMMAND_BLUSH_DESCRIPTION: `Start blushing at someone.`,
        COMMAND_BLUSH_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} blushed ${recNum} times and ${sender} blushed at others ${authNum} times`,
        COMMAND_BLUSH_MULTIPLE: (sender, reciever) => `**${sender}** blushes at **${reciever}**`,
        COMMAND_BLUSH_SELF: `is blushing`,
        COMMAND_BLUSH_SINGLE: (sender, reciever) => `**${sender}'s** face turned red because of **${reciever}**`,
        COMMAND_BONK_DESCRIPTION: `Bonk someone's head (go to horny jail).`,
        COMMAND_BONK_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got bonked ${recNum} times and ${sender} bonked others heads ${authNum} times`,
        COMMAND_BONK_MULTIPLE: (sender, reciever) => `**${sender}** gives bonks to **${reciever}**`,
        COMMAND_BONK_SINGLE: (sender, reciever) => `**${reciever}** got their head bonked by **${sender}**`,
        COMMAND_BOOP_DESCRIPTION: `Give someone a cute little boop on the nose.`,
        COMMAND_BOOP_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got their nose booped ${recNum} times and ${sender} booped others ${authNum} times`,
        COMMAND_BOOP_MULTIPLE: (sender, reciever) => `**${reciever}** get nosebooped by **${sender}**`,
        COMMAND_BOOP_SINGLE: (sender, reciever) => `**${reciever}** got booped by **${sender}**`,
        COMMAND_CRY_DESCRIPTION: `Cry at/because of somebody (T-T).`,
        COMMAND_CRY_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} cried ${recNum} times and ${sender} cried at others ${authNum} times`,
        COMMAND_CRY_MULTIPLE: (sender, reciever) => `**${reciever}** hear the cries of **${sender}**`,
        COMMAND_CRY_SELF: `cries silently`,
        COMMAND_CRY_SINGLE: (sender, reciever) => `**${sender}** cries out at **${reciever}**`,
        COMMAND_CUDDLE_DESCRIPTION: `Give someone a cozy, warm cuddle.`,
        COMMAND_CUDDLE_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got cuddled ${recNum} times and ${sender} cuddled with others ${authNum} times`,
        COMMAND_CUDDLE_MULTIPLE: (sender, reciever) => `**${reciever}** all cuddle with **${sender}**`,
        COMMAND_CUDDLE_SINGLE: (sender, reciever) => `**${sender}** is embracing **${reciever}** for cuddles`,
        COMMAND_DAB_DESCRIPTION: `Dab on the haters.`,
        COMMAND_DAB_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} dabbed ${recNum} times and ${sender} dabbed at others ${authNum} times`,
        COMMAND_DAB_MULTIPLE: (sender, reciever) => `**${sender}** dabs at **${reciever}**`,
        COMMAND_DAB_SELF: `is dabbing`,
        COMMAND_DAB_SINGLE: (sender, reciever) => `**${sender}** is dabbing in front of **${reciever}**`,
        COMMAND_FACEPALM_DESCRIPTION: `Facepalm yourself due to someone's stupidity.`,
        COMMAND_FACEPALM_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} facepalmed ${recNum} times and ${sender} facepalmed at others ${authNum} times`,
        COMMAND_FACEPALM_MULTIPLE: (sender, reciever) => `**${sender}** is facepalming at **${reciever}**`,
        COMMAND_FACEPALM_SELF: `is facepalming`,
        COMMAND_FACEPALM_SINGLE: (sender, reciever) => `**${sender}** is facepalming because of **${reciever}**`,
        COMMAND_HUG_DESCRIPTION: `Give someone a tight, loving hug (and never let them go).`,
        COMMAND_HUG_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} has been hugged ${recNum} times and ${sender} hugged others ${authNum} times`,
        COMMAND_HUG_MULTIPLE: (sender, reciever) => `**${sender}** gives hugs to **${reciever}**`,
        COMMAND_HUG_SINGLE: (sender, reciever) => `**${sender}** is hugging **${reciever}**`,
        COMMAND_KILL_DESCRIPTION: `Kill someone (dont worry the cops won't see you).`,
        COMMAND_KILL_FOOTER: (sender, reciever, authNum, recNum) => `${sender} killed others ${authNum} times and ${reciever} got killed ${recNum} times (how is that possible?)`,
        COMMAND_KILL_MULTIPLE: (sender, reciever) => `**${sender}** murders **${reciever}**`,
        COMMAND_KILL_SINGLE: (sender, reciever) => `**${sender}** is trying to kill **${reciever}**`,
        COMMAND_KISS_DESCRIPTION: `Give someone a cute kiss (^3^).`,
        COMMAND_KISS_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got kissed ${recNum} times and ${sender} kissed others ${authNum} times`,
        COMMAND_KISS_MULTIPLE: (sender, reciever) => `**${sender}** gives kisses to **${reciever}**`,
        COMMAND_KISS_SINGLE: (sender, reciever) => `**${sender}** and **${reciever}** are kissing`,
        COMMAND_LICK_DESCRIPTION: `Give someone a licky lick`,
        COMMAND_LICK_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} has been licked ${recNum} times and ${sender} has licked others ${authNum} times`,
        COMMAND_LICK_MULTIPLE: (sender, reciever) => `**${reciever}** are getting licked by **${sender}**`,
        COMMAND_LICK_SINGLE: (sender, reciever) => `**${sender}** is licking **${reciever}**`,
        COMMAND_LURK_DESCRIPTION: `Lurk in the distance and stare at someone, *totally not wierd*.`,
        COMMAND_LURK_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got lurked at ${recNum} times and ${sender} lurked at others ${authNum} times`,
        COMMAND_LURK_MULTIPLE: (sender, reciever) => `**${sender}** is lurking around **${reciever}**`,
        COMMAND_LURK_SELF: `is lurking`,
        COMMAND_LURK_SINGLE: (sender, reciever) => `**${sender}** is secretly lurking around **${reciever}**`,
        COMMAND_NOM_DESCRIPTION: `Lightly bite someone (om nom nom).`,
        COMMAND_NOM_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got nommed on ${recNum} times and ${sender} nommed on others ${authNum} times`,
        COMMAND_NOM_MULTIPLE: (sender, reciever) => `**${reciever}** gets nommed on by **${sender}**`,
        COMMAND_NOM_SINGLE: (sender, reciever) => `**${sender}** is nomming on **${reciever}**`,
        COMMAND_PANIC_DESCRIPTION: `Get panicked (aaaaaaaaaaa).`,
        COMMAND_PANIC_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} panicked ${recNum} times and ${sender} panicked at others ${authNum} times`,
        COMMAND_PANIC_MULTIPLE: (sender, reciever) => `**${sender}** is panicking at **${reciever}**`,
        COMMAND_PANIC_SELF: `is panicking`,
        COMMAND_PANIC_SINGLE: (sender, reciever) => `**${sender}** panicked because of **${reciever}**`,
        COMMAND_PAT_DESCRIPTION: `Give someone a pat on their head.`,
        COMMAND_PAT_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got pat ${recNum} times and ${sender} pat others ${authNum} times`,
        COMMAND_PAT_MULTIPLE: (sender, reciever) => `**${reciever}** get pats on the head from **${sender}**`,
        COMMAND_PAT_SINGLE: (sender, reciever) => `**${sender}** is patting **${reciever}**`,
        COMMAND_PECK_DESCRIPTION: `Give someone a peck on the cheek.`,
        COMMAND_PECK_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got pecked ${recNum} times and ${sender} pecked others ${authNum} times`,
        COMMAND_PECK_MULTIPLE: (sender, reciever) => `**${sender}** gives pecks to **${reciever}**`,
        COMMAND_PECK_SINGLE: (sender, reciever) => `**${sender}** gives a small peck to **${reciever}**`,
        COMMAND_ROLEPLAY_NO_MEMBER: act => `**Hey,** you need to specify **one member** to ${act}.`,
        COMMAND_SHOOT_DESCRIPTION: `Shoot someone *pew pew*`,
        COMMAND_SHOOT_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got shot at ${recNum} times and ${sender} shot at others ${authNum} times`,
        COMMAND_SHOOT_MULTIPLE: (sender, reciever) => `**${reciever}** get shot by **${sender}**`,
        COMMAND_SHOOT_SINGLE: (sender, reciever) => `**${sender}** is aiming for **${reciever}**`,
        COMMAND_SHRUG_DESCRIPTION: `Shrug at someone.`,
        COMMAND_SHRUG_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} has been shrugged at ${recNum} times and ${sender} shrugged at others ${authNum} times`,
        COMMAND_SHRUG_MULTIPLE: (sender, reciever) => `**${sender}** shrugs off **${reciever}**`,
        COMMAND_SHRUG_SELF: `is shrugging`,
        COMMAND_SHRUG_SINGLE: (sender, reciever) => `**${sender}** is shrugging **${reciever}** off`,
        COMMAND_SIP_DESCRIPTION: `Passive-aggresively sip at someone.`,
        COMMAND_SIP_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} has been sipped with ${recNum} times and ${sender} sipped with others ${authNum} times`,
        COMMAND_SIP_MULTIPLE: (sender, reciever) => `**${sender}** sips with **${reciever}**`,
        COMMAND_SIP_SELF: `is sipping some juice`,
        COMMAND_SIP_SINGLE: (sender, reciever) => `**${sender}** sips their juice while staring at **${reciever}**`,
        COMMAND_SLAP_DESCRIPTION: `Give someone a big fat slap (wham).`,
        COMMAND_SLAP_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got slapped ${recNum} times and ${sender} slapped others ${authNum} times`,
        COMMAND_SLAP_MULTIPLE: (sender, reciever) => `**${reciever}** get slapped by **${sender}**`,
        COMMAND_SLAP_SINGLE: (sender, reciever) => `**${sender}** is slapping **${reciever}**`,
        COMMAND_SLEEP_DESCRIPTION: `Go to sleep (ya seriously need it)`,
        COMMAND_SLEEP_FOOTER: (sender, reciever, authNum, recNum) => `${sender} has fallen asleep ${authNum} times and ${reciever} has been slept with ${recNum} times`,
        COMMAND_SLEEP_MULTIPLE: (sender, reciever) => `**${sender}** is sleeping with **${reciever}**`,
        COMMAND_SLEEP_SELF: `is going to sleep`,
        COMMAND_SLEEP_SINGLE: (sender, reciever) => `**${sender}** is sleeping on **${reciever}**`,
        COMMAND_STAB_DESCRIPTION: `Poke a knife at someone very hard (caution: there will be blood).`,
        COMMAND_STAB_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got stabbed ${recNum} times (ouch) and ${sender} stabbed others ${authNum} times`,
        COMMAND_STAB_MULTIPLE: (sender, reciever) => `**${reciever}** are being stabbed by **${sender}**`,
        COMMAND_STAB_SINGLE: (sender, reciever) => `**${sender}** is poking **${reciever}** with a knife`,
        COMMAND_STARE_DESCRIPTION: `Just stare at someone.`,
        COMMAND_STARE_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got stared at ${recNum} times and ${sender} stared at others ${authNum} times`,
        COMMAND_STARE_MULTIPLE: (sender, reciever) => `**${reciever}** notice that **${sender}** is starring`,
        COMMAND_STARE_SELF: `is staring`,
        COMMAND_STARE_SINGLE: (sender, reciever) => `**${sender}** is staring at **${reciever}**`,
        COMMAND_TEASE_DESCRIPTION: `Tease someone. :p`,
        COMMAND_TEASE_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got teased ${recNum} times and ${sender} teased others ${authNum} times`,
        COMMAND_TEASE_MULTIPLE: (sender, reciever) => `**${reciever}** are teased by **${sender}**`,
        COMMAND_TEASE_SELF: `is teasing`,
        COMMAND_TEASE_SINGLE: (sender, reciever) => `**${sender}** is being a tease to **${reciever}**`,
        COMMAND_WAVE_DESCRIPTION: `Wave someone hello/goodbye.`,
        COMMAND_WAVE_FOOTER: (sender, reciever, authNum, recNum) => `${reciever} got waved at ${recNum} times and ${sender} waved at others ${authNum} times`,
        COMMAND_WAVE_MULTIPLE: (sender, reciever) => `**${sender}** is waving at **${reciever}**`,
        COMMAND_WAVE_SELF: `is waving`,
        COMMAND_WAVE_SINGLE: (sender, reciever) => `**${sender}** is waving at **${reciever}**`,

        // Secret Commands

        // Settings Commands
        COMMAND_ANTI_CONFIRM: `**Hey,** are you sure you want to delete **all anti** settings on this server?`,
        COMMAND_ANTI_CURRENT: (setting, state) => `**anti-${setting}s** are currently **${state === true ? 'enabled' : 'disabled'}**.`,
        COMMAND_ANTI_DESCRIPTION: `Toggle anti or automod in your server. Current options are \`invite\` to filter Discord invite links, and \`clear\` to reset anti settings.`,
        COMMAND_ANTI_DISABLED: setting => `**Gotcha,** stopped filtering **${setting}s**.`,
        COMMAND_ANTI_ENABLED: setting => `**Oki,** now I'll start filtering **${setting}s**.`,
        COMMAND_ANTI_INVALIDUSE: `**Please,** specify a proper use case [invite|clear].`,
        COMMAND_DISBOARD_CHANNEL_NOCHANNEL: `**Whoops,** there isn't any disboard channel set right now. Try setting one with \`fox disboard channel #channel\`.`,
        COMMAND_DISBOARD_CHANNEL_NOW: channel => `**Heya,** right now the disboard channel is set as <#${channel}>.`,
        COMMAND_DISBOARD_CHANNEL_REMOVED: `**Alrighty,** I removed the disboard channel for you.`,
        COMMAND_DISBOARD_CHANNEL_SET: channel => `**Gotcha,** set the disboard channel to ${channel}.`,
        COMMAND_DISBOARD_DESCRIPTION: `Configure my disboard settings for your server using different arguments. If you want to test out the disboard settings you can use the \`testdisboard\` command.\n\nSpecify \`channel\` to set the channel where I should send disboard reminders.\n\nSpecify \`message\` to set the message I'll send in the set disboard channel. In your message you can also use the variable: \`{guild}\` for the server's name.`,
        COMMAND_DISBOARD_INVALIDUSE: `**Please,** specify a proper use case [channel|message].`,
        COMMAND_DISBOARD_MESSAGE_NOMESSAGE: `**Whoops,** there isn't any disboard message set. For now I'll use my default:\`\`\`Time to bump the server on disboard. Use the command \`!d bump\` then come back in **two hours**.\`\`\``,
        COMMAND_DISBOARD_MESSAGE_NOW: message => `**Heya,** right now the disboard message is set to: \`\`\`${message}\`\`\``,
        COMMAND_DISBOARD_MESSAGE_REMOVED: `**Oki,** I'll remove the disboard message and use my default instead.`,
        COMMAND_DISBOARD_MESSAGE_SET: message => `**Gotcha,** I'll set the disboard message to \`\`\`${message}\`\`\``,
        COMMAND_GOODBYE_DESCRIPTION: `Configure my goodbye settings for your server using different arguments. If you want to test out the goodbye settings you can use the \`testleave\` command.\n\nSpecify \`channel\` to set the channel where I should send goodbye messages.\n\nSpecify \`message\` to set the message I'll send in the set goodbye channel. In your message you can also use the variables: \`{name}\`, \`{tag}\` (ex: ArEo#1245), \`{discrim}\`, \`{joined}\`, \`{server}\`, and \`{count}\` for the server's member count.`,
        COMMAND_GOODBYE_CHANNEL_NOCHANNEL: `**Whoops,** there isn't any goodbye channel set right now. Try setting one with \`fox goodbye channel #channel\`.`,
        COMMAND_GOODBYE_CHANNEL_NOW: channel => `**Heya,** right now the goodbye channel is set as <#${channel}>.`,
        COMMAND_GOODBYE_CHANNEL_REMOVED: `**Alrighty,** I removed the goodbye channel for you.`,
        COMMAND_GOODBYE_CHANNEL_SET: channel => `**Gotcha,** set the goodbye channel to ${channel}.`,
        COMMAND_GOODBYE_INVALIDUSE: `**Please,** specify a proper use case [channel|message].`,
        COMMAND_GOODBYE_MESSAGE_NOMESSAGE: `**Heya,** right now there isn't any goodbye message set. For now I'll use my default:\`\`\`**{member}** just joined the server!\`\`\``,
        COMMAND_GOODBYE_MESSAGE_NOW: message => `**Heya,** right now the goodbye message is set to: \`\`\`${message}\`\`\``,
        COMMAND_GOODBYE_MESSAGE_REMOVED: `**Oki,** I'll remove the goodbye message and use my default instead.`,
        COMMAND_GOODBYE_MESSAGE_SET: message => `**Gotcha,** I'll set the goodbye message to \`\`\`${message}\`\`\``,
        COMMAND_LANGUAGE_ARRAY: ['__Foxxie\'s Supported Languages__:\n', ':flag_us: **en-US** (English)', ':flag_mx: **es-MX** (Spanish)'].join('\n'),
        COMMAND_LANGUAGE_DESCRIPTION: `Set the server's language or view my list of supported languages. By default my language will be \`en-US\`.`,
        COMMAND_LANGUAGE_SUCCESS: `**Successfully** set guild language to **en-US**.`,
        COMMAND_LOG_CONFIRM: `**Hey,** are you sure you want to reset **all logging** settings on this server?`,
        COMMAND_LOG_DELETE_NOCHANNEL: `**Whoops,** there isn't a delete logging channel set.`,
        COMMAND_LOG_DELETE_NOW: channel => `**Right now,** the delete logging channel is set to <#${channel}>.`,
        COMMAND_LOG_DELETE_REMOVED: `**Gotcha,** removed the delete logging channel.`,
        COMMAND_LOG_DELETE_SET: channel => `**Alright,** set the delete logging channel to ${channel.toString()}.`,
        COMMAND_LOG_DESCRIPTION: `Configures logging settings in the server with specific use cases. Case \`mod\` logs all moderation actions to the specified channel. Case \`edit\` logs message edits to a channel. And case \`delete\` logs message deletion to a channel. If you want to disable this logging put \`none\` or \`off\` after the use case. If no channel is specified I will show the current channel set.`,
        COMMAND_LOG_EDIT_NOCHANNEL: `**Whoops,** there isn't an edit logging l set.`,
        COMMAND_LOG_EDIT_NOW: channel => `**Right now,** the edit logging channel is set to <#${channel}>.`,
        COMMAND_LOG_EDIT_REMOVED: `**Gotcha,** removed the edit logging channel.`,
        COMMAND_LOG_EDIT_SET: channel => `**Alright,** set the edit logging channel to ${channel.toString()}.`,
        COMMAND_LOG_INVALIDUSE: `**Please,** specify a proper use case [mod|delete|edit|reset].`,
        COMMAND_LOG_MOD_NOCHANNEL: `**Whoops,** there isn't a moderation logging channel set.`,
        COMMAND_LOG_MOD_NOW: channel => `**Right now,** the moderation logging channel is set to <#${channel}>.`,
        COMMAND_LOG_MOD_REMOVED: `**Gotcha,** removed the moderation logging channel.`,
        COMMAND_LOG_MOD_SET: channel => `**Alright,** set the moderation logging channel to ${channel.toString()}.`,
        COMMAND_PERMISSION_CONFIRM: `**Hey,** are you sure you want to reset **all permission** settings on this server?`,
        COMMAND_PERMISSION_DESCRIPTION: `Allows you to enable or disable certain users from using my commands in your server.`,
        COMMAND_PERMISSION_INVALIDUSE: `**Hey,** you need to specify a proper user case [allow|deny|reset].`,
        COMMAND_PERMISSION_NOMEMBER: `**Sorry,** you need to provide either a user @mention or user Id.`,
        COMMAND_PREFIX_DESCRIPTION: `Lets you add custom per-server prefixes that I will listen to for commands and tags. To clear all custom prefixes just specify \`none\`.`,
        COMMAND_PREFIX_CONFIRM: `**Hey,** are you sure you want to reset **all prefixes** on this server?`,
        COMMAND_PREFIX_NONE: `**Whoops,** there isn't any custom prefixes set right now. You can add one with \`fox prefix (prefix)\`.`,
        COMMAND_PREFIX_NOW: (prefixes, list) => `Right now, this server's prefix${prefixes.length > 1 ? 'es are' : ' is'} set to ${prefixes.length > 1 ?  `${list} and \`${prefixes.pop()}\`` : `\`${prefixes[0]}\``}`,
        COMMAND_PREFIX_ADDED: prefix => `**Alright,** I added \`${prefix}\` to the list of this server's custom prefixes.`,
        COMMAND_SETTINGS_AUTOMOD: `automod`,
        COMMAND_SETTINGS_AUTOMOD_GIFTS: `└─ ${granted} Gifts **filtered**`,
        COMMAND_SETTINGS_AUTOMOD_IMAGES: `└─ ${granted} Images **filtered**`,
        COMMAND_SETTINGS_AUTOMOD_INVITES: `└─ ${granted} Invites **filtered**`,
        COMMAND_SETTINGS_AUTOMODS: (length) => `${length ? `${granted} **${length}** Anti${length > 1 ? 's' : ''} currently **enabled**` : `${notSpecified} No antis currently **enabled**`}`,
        COMMAND_SETTINGS_BLOCKED_USERS: (length, map) => `${length ? `${denied} **${length}** Blacklisted user${length > 1 ? 's' : ''}${map?`\n${map}`:''}` : `${granted} This server has no blacklisted users.`}`,
        COMMAND_SETTINGS_DESCRIPTION: `Allows you to view various settings for me in this server, you can also specify \`welcome\`, \`goodbye\`, \`log\`, \`starboard\`, \`disboard\`, \`anti\`, and \`blacklist\` to view more detailed settings in each category.`,
        COMMAND_SETTINGS_DISABLED: `disabled`,
        COMMAND_SETTINGS_DISBOARD: `disboard`,
        COMMAND_SETTINGS_DISBOARDS: (emoji, state, lang, language) => `${emoji} Disboard currently **${language.get(`COMMAND_SETTINGS_${state.toUpperCase()}`, lang)}**`,
        COMMAND_SETTINGS_ENABLED: `enabled`,
        COMMAND_SETTINGS_GOODBYE: `goodbye`,
        COMMAND_SETTINGS_GOODBYES: (emoji, state, lang, language) => `${emoji} Goodbyes currently **${language.get(`COMMAND_SETTINGS_${state.toUpperCase()}`, lang)}**`,
        COMMAND_SETTINGS_LOGGER: `logger`,
        COMMAND_SETTINGS_LOGGER_COMMAND: channel => `└─ ${granted} Commands **enabled** (in <#${channel}>)`,
        COMMAND_SETTINGS_LOGGER_DELETE: channel => `└─ ${granted} Deletes **enabled** (in <#${channel}>)`,
        COMMAND_SETTINGS_LOGGER_EDIT: channel => `└─ ${granted} Edits **enabled** (in <#${channel}>)`,
        COMMAND_SETTINGS_LOGGER_INVITE: channel => `└─ ${granted} Invites **enabled** (in <#${channel}>)`,
        COMMAND_SETTINGS_LOGGER_MODERATION: channel => `└─ ${granted} Moderation **enabled** (in <#${channel}>)`,
        COMMAND_SETTINGS_LOGGERS: (emoji, state, lang, language) => `${emoji} Logger currently **${language.get(`COMMAND_SETTINGS_${state.toUpperCase()}`, lang)}**`,
        COMMAND_SETTINGS_NONE: `This server currently has **no settings** set.`,
        COMMAND_SETTINGS_NOTENABLED: `not enabled`,
        COMMAND_SETTINGS_PREFIX: (emoji, size, map) => `${emoji} **${size}** Prefix${size>1?'es':''} **enabled** (${map})`,
        COMMAND_SETTINGS_SIDE_CHANNEL: (emoji, sideVal) => `└─ ${emoji} Channel **enabled** (<#${sideVal}>)`,
        COMMAND_SETTINGS_SIDE_MESSAGE: (emoji, sideVal) => `└─ ${emoji} Message **enabled** (\`${sideVal}...\`)`,
        COMMAND_SETTINGS_SIDE_PING: (role) => `└─ ${granted} Ping **enabled** (\`${role}\`)`,
        COMMAND_SETTINGS_STARBOARD: `starboard`,
        COMMAND_SETTINGS_STARBOARDS: (emoji, state, lang, language) => `${emoji} Starboard currently **${language.get(`COMMAND_SETTINGS_${state.toUpperCase()}`, lang)}**`,
        COMMAND_SETTINGS_STARBOARD_MINIMUM: minimum => `└─ ${granted} Minimum **enabled** (**${minimum}**)`,
        COMMAND_SETTINGS_STARBOARD_NOSTAR: (size, map) => `└─ ${denied} **${size}** No star channel${size > 1 ? 's':''} **enabled** (${map})`,
        COMMAND_SETTINGS_STARBOARD_NOTIFICATIONS: `└─ ${denied} Star Notifications **disabled**`,
        COMMAND_SETTINGS_STARBOARD_SELF: `└─ ${denied} Starself **disabled**`,
        COMMAND_SETTINGS_TITLE: (guild, setting, language, lang) => `__Foxxie's ${setting ? `${language.get(`COMMAND_SETTINGS_${setting.toUpperCase()}`, lang)} ` : ''}settings in **${guild}**:__\n`,
        COMMAND_SETTINGS_USER: `user`,
        COMMAND_SETTINGS_WELCOME: `welcome`,
        COMMAND_SETTINGS_WELCOMES: (emoji, state, lang, language) => `${emoji} Welcomes currently **${language.get(`COMMAND_SETTINGS_${state.toUpperCase()}`, lang)}**`,
        COMMAND_TAG_ADDED: (tag, text) => `**Gotcha,** added the tag \`${tag}\` with the content: \`\`\`${text}\`\`\``,
        COMMAND_TAG_DESCRIPTION: `Allows you to create, remove or list special tags for this guild (Custom commands). It is strongly advised you do not create a tag with the same name as a command to avoid causing any conflicts.`,
        COMMAND_TAG_EXISTS: tag => `**Whoops,** the tag \`${tag}\` already exists.`,
        COMMAND_TAGS_LIST: (guild, size) => `**Tags in ${guild}** (${size})`,
        COMMAND_TAG_NOEXIST: tag => `**Whoops,** the tag \`${tag}\` doesn't exist.`,
        COMMAND_TAGS_NONE: `**Hmmm,** it doesn't seem like theres any tags in this server.`,
        COMMAND_TAG_NOTAG: `**Please,** provide a tag.`,
        COMMAND_TAG_NOTEXT: `**Please,** provide some text to go along with this tag.`,
        COMMAND_TAG_REMOVED: tag => `**Gotcha,** removed the tag \`${tag}\`.`,
        COMMAND_TESTJOIN_DESCRIPTION: `Simulates what would happen if a new member joined the server, sending a message to your specified welcome channel.`,
        COMMAND_TESTLEAVE_DESCRIPTION: `Simulates what would happen if a member left the server. Sending a goodbye message to your specified goodbye channel.`,
        COMMAND_WELCOME_DESCRIPTION: `Configure my welcome settings for your server using different arguments. If you want to test out the welcome settings you can use the \`testjoin\` command.\n\nSpecify \`channel\` to set the channel where I should send welcome messages.\n\nSpecify \`message\` to set the message I'll send in the set welcome channel. In your message you can also use the variables: \`{member}\`, \`{name}\`, \`{tag}\` (ex: ArEo#1245), \`{discrim}\`, \`{created}\`, \`{server}\`, and \`{count}\` for the server's member count.`,
        COMMAND_WELCOME_CHANNEL_NOCHANNEL: `**Whoops,** there isn't any welcome channel set right now. Try setting one with \`fox welcome channel #channel\`.`,
        COMMAND_WELCOME_CHANNEL_NOW: channel => `**Heya,** right now the welcome channel is set as <#${channel}>.`,
        COMMAND_WELCOME_CHANNEL_REMOVED: `**Alrighty,** I removed the welcome channel for you.`,
        COMMAND_WELCOME_CHANNEL_SET: channel => `**Gotcha,** set the welcome channel to ${channel}.`,
        COMMAND_WELCOME_INVALIDUSE: `**Please,** specify a proper use case [channel|message].`,
        COMMAND_WELCOME_MESSAGE_NOMESSAGE: `**Heya,** right now there isn't any welcome message set. For now I'll use my default:\`\`\`**{member}** just joined the server!\`\`\``,
        COMMAND_WELCOME_MESSAGE_NOW: message => `**Heya,** right now the welcome message is set to: \`\`\`${message}\`\`\``,
        COMMAND_WELCOME_MESSAGE_REMOVED: `**Oki,** I'll remove the welcome message and use my default instead.`,
        COMMAND_WELCOME_MESSAGE_SET: message => `**Gotcha,** I'll set the welcome message to \`\`\`${message}\`\`\``,

        // Utility Commands
        COMMAND_ABOUT_COMMANDS_TITLE: `**Commands**`,
        COMMAND_ABOUT_COMMANDS_VALUE: `**•** As of now, I have **${commands}** commands and **${aliases}** aliases.`,
        COMMAND_ABOUT_CREATED_TITLE: `**Created**`,
        COMMAND_ABOUT_CREATED_VALUE: date => `**•** I was created on Mon, Feb 15th 2021. **(${date} ago)**`,
        COMMAND_ABOUT_CREDITS_TITLE: `**Credits**`,
        COMMAND_ABOUT_CREDITS_VALUE: `**•** Developer: ${developer}\n**•** Spanish Translations: ${spanishTranslation}\n**•** Additional Help: ${additionalHelp}`,
        COMMAND_ABOUT_DESCRIPTION: `Get some basic information about me, my statistics, and some of my credits.`,
        COMMAND_ABOUT_GUILDS_TITLE: `**Guilds**`,
        COMMAND_ABOUT_GUILDS_VALUE: guilds => `**•** I'm looking after **${guilds}** servers.`,
        COMMAND_ABOUT_SUMMARY: `I started as a developmental project by **Ruffpuff#0017** to learn basic node.js and javascript. Then I was added to his server **The Corner Store** as a way to overall reduce the amount of bots. Now I'm hoping to be added to many guilds and maybe I could be helpful to ya.`,
        COMMAND_ABOUT_TITLE: `About Foxxie!`,
        COMMAND_ABOUT_USERS_TITLE: `**Users**`,
        COMMAND_ABOUT_USERS_VALUE: users => `**•** Right now I'm cleaning up after **${users}** users.`,
        COMMAND_ABOUT_VERSION_TITLE: `**Version**`,
        COMMAND_ABOUT_VERSION_VALUE: `**•** Currently I'm in version **${version}**, pretty much always getting worked on though ;)`,
        COMMAND_AFK_DESCRIPTION: `Sets an AFK for when people ping ya. You can provide a reason, but if no reason is provided it will show as \`AFK\`. When pinged in chat your AFK status will show. And the next time you talk in chat your AFK will be removed.`,
        COMMAND_AFK_EMBED_AUTHOR: user => `${user} has set an AFK`,
        COMMAND_AFK_EMBED_DESCRIPTION: reason => `**Reason**: ${reason}`,
        COMMAND_AVATAR_DESCRIPTION: `Get a high resolution image of a user's profile picture. In PNG, JPEG, and WEBP formats.`,
        COMMAND_AVATAR_FOXXIE: `**This is my profile picture.\nIsn't it so attractive? This one is\nonly a placeholder, soon I'll have a new one.**`,
        COMMAND_BADGES_BOOSTS: boosts => `Boost${boosts > 1 ? 's' : ''}`,
        COMMAND_BADGES_BALANCE: `House Balance`,
        COMMAND_BADGES_BOT: (bots, varif) => `Bot${bots - varif > 1 ? 's' : ''}`,
        COMMAND_BADGES_BOTDEV: devs => `Early Verified Bot Developer${devs > 1 ? 's' : ''}`,
        COMMAND_BADGES_BOTVERIFIED: verified => `Verified Bot${verified > 1 ? 's' : ''}`,
        COMMAND_BADGES_BRAVERY: `House Bravery`,
        COMMAND_BADGES_BRILLIANCE: `House Brilliance`,
        COMMAND_BADGES_BUG1: `Bug Hunter Level 1`,
        COMMAND_BADGES_BUG2: `Bug Hunter Level 2`,
        COMMAND_BADGES_DESCRIPTION: `Gives a rough estimate for how many user badges there are in a server. Although right now, due to Discord's limitations this command only works in servers with 1,000 members or less.`,
        COMMAND_BADGES_DISCORD_EMPLOYEE: flag => `Discord Employee${flag > 1 ? 's' : ''}`,
        COMMAND_BADGES_EARLY: supporters => `Early Supporter${supporters > 1 ? 's' : ''}`,
        COMMAND_BADGES_GUILDSIZE: size => `**Sorry,** requesting badges from this server is limited by Discord due to it's size, this server needs ${size-1000} members less for this command to work.`,
        COMMAND_BADGES_HYPE_EVENT: `HypeSquad Events`,
        COMMAND_BADGES_NITRO: `Nitro`,
        COMMAND_BADGES_PARTNERED: flag => `Partnered Server Owner${flag > 1 ? 's' : ''}`,
        COMMAND_CORONA_CASES_TITLE: `${cases} **Cases**`,
        COMMAND_CORONA_CASES_VALUE: stats => `**${stats.cases ? stats.cases.toLocaleString() : 'N/A'}** ${stats.todayCases ? `(+${stats.todayCases.toLocaleString()} today)` : ''}\n${stats.critical ? stats.critical.toLocaleString() : 'N/A'} critical\n${stats.casesPerOneMillion? `${(stats.casesPerOneMillion / 10000).toFixed(2)}%` : 'N/A'} absolute infection rate`,
        COMMAND_CORONA_DEATHS_TITLE: `${deaths} **Deaths**`,
        COMMAND_CORONA_DEATHS_VALUE: stats => `**${stats.deaths ? stats.deaths.toLocaleString() : 'N/A'}** ${stats.todayDeaths ? `(+${stats.todayDeaths.toLocaleString()} today)` : ''}\n${stats.cases && stats.deaths ? `${((stats.deaths / stats.cases) * 100).toFixed(2)}%` : 'N/A'}% case fatality rate\n${stats.deathsPerOneMillion ? `${(stats.deathsPerOneMillion / 10000).toFixed(2)}%` : 'N/A'}% absolute fatality rate`,
        COMMAND_CORONA_DESCRIPTION: `Get the current statistics of the Covid-19 pandemic. You can enter a country name, US-state name, or \`global\` for statistics of the whole world.`,
        COMMAND_CORONA_EMBED_TITLE: search => `COVID-19 stats / ${search.toUpperCaseFirst()}`,
        COMMAND_CORONA_EMBED_FOOTER: `Gotta tell ya that these stats may not necessarily comprehensive, complete, or up to date.\nDon't go tryna use this as medical advise or anything.`,
        COMMAND_CORONA_NO_DATA: search => `**Sorry,** couldn't find any data for \`${search}\`.`,
        COMMAND_CORONA_RECOVERIES_TITLE: `${recoveries} **Recoveries**`,
        COMMAND_CORONA_RECOVERIES_VALUE: stats => `**${stats.recovered ? stats.recovered.toLocaleString() : 'N/A'}**\n${stats.recovered && stats.cases ? `${((stats.recovered / stats.cases) * 100).toFixed(2)}%` : 'N/A'} case recovery rate`,
        COMMAND_CORONA_TESTS_TITLE: `${tests} **Tests**`,
        COMMAND_CORONA_TESTS_VALUE: stats => `**${stats.tests ? stats.tests.toLocaleString() : 'N/A'}**\n${stats.testsPerOneMillion ? `${(stats.testsPerOneMillion / 10000).toFixed(2)}%` : 'N/A'} of population tested`,
        COMMAND_DEFINE_CANCELLED: `Oki, command **cancelled**.`,
        COMMAND_DEFINE_DESCRIPTION: `I'll fetch you the definition of a term using the Merriam-Webster Dictionary API.`,
        COMMAND_DEFINE_NOARGS: `**Hey!** You didn't provide a word to define. Respond with a word in **60 seconds** or send \`cancel\` to cancel.`,
        COMMAND_DEFINE_NORESULTS: word => `**Sorry,** I couldn't find a definition for the word \`${word}\`.`,
        COMMAND_HELP_COMMAND_NOTVALID: `**Hey,** that's not a valid command!`,
        COMMAND_HELP_DESCRIPTION: `Will display information on my commands or display all of them in a nice menu. You can also specify the \`-c\` or \`-channel\` flag to send the menu in the current channel.`,
        COMMAND_HELP_EMBED_AUTOMATION: size => `:robot: **Automation (${size})**`,
        COMMAND_HELP_EMBED_DESCRIPTION: `These are all of my commands. For additional info on a certain command, as well as example usage. Do \`fox help (command)\`.`,
        COMMAND_HELP_EMBED_FUN: size => `:laughing: **Fun (${size})**`,
        COMMAND_HELP_EMBED_MODERATION: size => `:shield: **Moderation (${size})**`,
        COMMAND_HELP_EMBED_ROLEPLAY: size => `:hugging: **Roleplay (${size})**`,
        COMMAND_HELP_EMBED_SETTINGS: size => `:wrench: **Settings (${size})**`,
        COMMAND_HELP_EMBED_TITLE: `Foxxie's commands!`,
        COMMAND_HELP_EMBED_UTILITY: size => `:flashlight: **Utility (${size})**`,
        COMMAND_HELP_LINKS_DESCRIPTION: `[[Invite Foxxie](${inviteURL})] | [[Support Server](${supportServer})] | [[Vote](${topggURL})] | [[Patreon](https://www.patreon.com/Thecornerstore)]`,
        COMMAND_HELP_LINKS_TITLE: `**Extra links and information**`,
        COMMAND_HELP_PERMISSIONS: perm => `**Permissions Required**: \`${perm}\``,
        COMMAND_HELP_USAGE: `**• Usage (Server only: true)**`,
        COMMAND_INFO_DESCRIPTION: ``,
        COMMAND_INFO_EMOJI_ANIMATED_TITLE: `**Animated**`,
        COMMAND_INFO_EMOJI_ANIMATED_VALUE: (animated) => `${animated ? 'Yes' : 'No'}`,
        COMMAND_INFO_EMOJI_CREATED: (name, date, ago) => `The **${name}** emote was created ${date} **(${ago} ago)**`,
        COMMAND_INFO_EMOJI_LINKS_TITLE: `**Image Links**`,
        COMMAND_INFO_EMOJI_NAME_TITLE: `**Name**`,
        COMMAND_INFO_ROLE_CREATED_TITLE: `**Created**`,
        COMMAND_INFO_ROLE_CREATED_VALUE: (days, ago) => `${days} **(${ago} ago)**`,
        COMMAND_INFO_ROLE_PERMISSIONS_TITLE: `**Permissions**`,
        COMMAND_INFO_ROLE_ALLPERMS: `Administrator (all permissions)`,
        COMMAND_INFO_ROLE_COLOR: `**Color**`,
        COMMAND_INFO_ROLE_MEMBERS_TITLE: `**Members**`,
        COMMAND_INFO_ROLE_MEMBERS_VALUE: (humans, bots) => `${humans} user${humans === 1 ? '' : 's'}, ${bots} bot${bots === 1 ? '' : 's'}`,
        COMMAND_INFO_ROLE_NONE: `none`,
        COMMAND_INFO_ROLE_PROPERTIES_ARRAY: (hoist, mention, manage, role) => [hoist ? `${granted} displayed seperately` : `${notSpecified} not displayed separately`, mention ? `${granted} mentionable as ${role}` : `${notSpecified} not mentionable`, manage ? `${granted} configurable` : `${notSpecified} managed by an integration`].join('\n'),
        COMMAND_INFO_ROLE_PROPERTIES_TITLE: `**Properties**`,
        COMMAND_INFO_USER_DISCORDJOIN: (join, timeSince) => `Joined Discord on ${join} **(${timeSince} ago)**`,
        COMMAND_INFO_USER_GUILDCREATE: props => `Created ${props[0]} on ${props[1]} **(${props[2]} ago)**`,
        COMMAND_INFO_USER_GUILDJOIN: props => `Joined ${props[0]} on ${props[1]} **(${props[2]} ago)**`,
        COMMAND_USER_MESSAGES_SENT: msgs => `${msgs.toLocaleString()} message${msgs === 1 ? '' : 's'} sent.`,
        COMMAND_INFO_USER_NOROLES: `No roles`,
        COMMAND_INFO_USER_NOTES: notes => `**Note${notes.length > 1 ? 's' : ''} (${notes.length})**`,
        COMMAND_INFO_USER_ROLES: roles => `**Role${roles > 2 ? `s` : ''} (${roles - 1})**`,
        COMMAND_INFO_USER_STATISTICS: `Statistics`,
        COMMAND_INFO_USER_WARNINGS: warns => `**Warning${warns.length > 1 ? 's' : ''} (${warns.length})**`,
        COMMAND_PING: `Ping?`,
        COMMAND_PING_DESCRIPTION: `Runs a connection test to discord and tells ya how long it'll take for me to respond.`,
        COMMAND_PING_DISCORD: `Discord Latency`,
        COMMAND_PING_FOOTER: `Ping may be high due to Discord breaking, not my problem.`,
        COMMAND_PING_NETWORK: `Network Latency`,
        COMMAND_PING_PONG: `**Pong**`,
        COMMAND_REDEEM_DESCRIPTION: `Allows you to redeem a key given by the bot owner for a special profile badge. These can be seen using \`fox info\`.`,
        COMMAND_REDEEM_NOEXIST: `**Sorry,** the key id provided either doesn't exist or has already been redeemed.`,
        COMMAND_REDEEM_NOKEY: `You didn't provide a **key Id** to redeem.`,
        COMMAND_REDEEM_SUCCESS: (icon, title) => `**Congrats,** I successfully redeemed ${icon} ${title}. For ya.`,
        COMMAND_REMINDME_DESCRIPTION: `Schedules me to remind you in the time given. You format the time like \`5m\` for five minutes or \`1d\` for one day. You can also use my flags \`-c\` or \`-channel\` in your reminder to have me remind you in the channel you sent that message instead of just DMs.`,
        COMMAND_REMINDME_INVALIDTIME: `**Hey,** that doesn't seem to be a proper time format, try like this: [5s|5m|5h|5d|5w].`,
        COMMAND_REMINDME_NOREASON: `**Whoops,** you need to specify a reason for this reminder.`,
        COMMAND_REMINDME_NOTIME: `**Sorry,** in order for me to remind you, you need to tell me when.`,
        COMMAND_REMINDME_SUCCESS: time => `**Alrighty,** I'll send that reminder your way in **${time}**.`,
        COMMAND_SETCOLOR_DESCRIPTION: `Have me automatically set a role's color for you, just provide the role and the six digit hex code.`,
        COMMAND_SETCOLOR_INVALIDCOLOR: `**Sorry,** that color is either not supported or in an incorrect format.`,
        COMMAND_SETCOLOR_NOPERMS: `**Whoops,** something went wrong while trying to set the color.`,
        COMMAND_SETCOLOR_NOROLE: `**Hey,** you need to provide a role to set the color of.`,
        COMMAND_SHORTEN_DESCRIPTION: `Shorten a long URL into a shorter one, even provide your own name for the link if desired.`,
        COMMAND_SHORTEN_ERROR: name => `**Sorry,** the provided name **${name}** is already in use at the domain "is.gd".`,
        COMMAND_SHORTEN_NOARGS: `**Please,** specify a **link** you would like to have shortened.`,
        COMMAND_SHORTEN_SUCCESS: url => `**Hey,** here is you're new **shortened** url (<${url}>).`,
        COMMAND_SHORTEN_SUCCESS_NAME: (name, url) => `**Hey,** here is you're new **shortened** url with the name **${name}** (<${url}>).`,
        COMMAND_STEAL_DESCRIPTION: `Steals a provided emoji and automatically adds it to your server. You can also provide a name for the emoji to automatically be named.`,
        COMMAND_STEAL_MAXEMOJI: `**Uh oh,** I can't steal anymore emojis because this server is already at the max it can have.`,
        COMMAND_STEAL_NOARGS: `**Whoops,** I can't steal an emoji if you don't provide one.`,
        COMMAND_STEAL_NOTEMOJI: `**Hey,** I can only steal proper emojis.`,
        COMMAND_STEAL_SUCCESS: name => `Stole ${name}`,
        COMMAND_SUPPORT_BODY: `[Click here!](${supportServer})\nHope we can help you out abit.`,
        COMMAND_SUPPORT_DESCRIPTION: `Provides the link to my support server if you have a question, request, or feedback.`,
        COMMAND_SUPPORT_HERE: `Hey hey, here's the link to my support server.`,
        COMMAND_UPTIME: (d, h, m, s) => `Hello! Foxxie **v${version}** was last rebooted **${d}** days, **${h}** hours, **${m}** minutes, and **${s}** seconds ago.`,
        COMMAND_UPTIME_DESCRIPTION: `Provides how long it has been since my last reboot. In days, hours, minutes, and seconds.`,
        COMMAND_WEATHER_DATE: `${date} **Date**`,
        COMMAND_WEATHER_DAY: `${dayCurrent} **Day**`,
        COMMAND_WEATHER_DEGREES_F: input => `${input} Degrees°F`,
        COMMAND_WEATHER_DESCRIPTION: `I can get ya the weather from a specified city including humidity, temperature, winds, and more.`,
        COMMAND_WEATHER_ERROR: `Please enter a valid **city** or **location** for me to get the proper weather.`,
        COMMAND_WEATHER_FEELS: `${feels} **Feels Like**`,
        COMMAND_WEATHER_HUMID: `${humidity} **Humidity**`,
        COMMAND_WEATHER_TEMPERATURE: `${temperature} **Temperature**`,
        COMMAND_WEATHER_TITLE: (local, sky) => `${local} (Weather: ${sky})`,
        COMMAND_WEATHER_TIMEZONE: `${timezone} **Timezone**`,
        COMMAND_WEATHER_WINDS: `${winds} **Winds**`,
        COMMAND_WOLFRAM_DESCRIPTION: `I'll get you data for a search result using the Wolfram|Alpha API.`,
        COMMAND_WOLFRAM_NO_ARGS: `**Whoops,** remember you need to specify a **search term**.`,
        COMMAND_WOLFRAM_NO_DATA: `**Sorry,** I couldn't find any data for that search.`,

        // Events
        EVENT_AUTOROLE_REASON: `Autorole - A role automatically assigned to members who join.`,
        EVENT_BOTROLE_REASON: `Botrole - A role automatically given to bots that join.`,
        EVENT_GUILDMEMBERADD_DEFAULT_WELCOMEMESSAGE: member => `**${member.toString()}** just joined the server!`,
        EVENT_GUILDMEMBERADD_PERSISTREASON: `Role persistency this member had these roles before leaving.`,
        EVENT_GUILDMEMBERREMOVE_DEFAULT_GOODBYEMESSAGE: member => `**${member.user.tag}** just left the server :(`,
        EVENT_STARBOARD_JUMP: `Jump to Message`,
        EVENT_STARBOARD_NOTIF_DESCRIPTION: (user, channel, link) => `A message by ${user} got starred enough to make it into the ${channel}.\nCheck it out [here](${link})`,
        EVENT_STARBOARD_NOTIF_TITLE: `:star: A new message made it into the starboard :star:`,

        // Inhibitors
        INHIBITORS_PERMISSIONS_AUTHOR: perm => `**You don't** have permission to run this command, you need the **${perm.toLowerCase().replace(/_/g, ' ')}** permission.`,
        INHIBITORS_PERMISSIONS_GUILDOWNER: `**Nope,** due to the harm this command can cause it can only be excuted by the guild owner.`,

        // Logs
        LOG_MODERATION_BANNED: tar => `Banned ${tar}`,
        LOG_MODERATION_CLEAREDWARNS: tar => `Cleared warnings for ${tar}`,
        LOG_MODERATION_EMBED_DATE: `**Date / Time**`,
        LOG_MODERATION_EMBED_LOCATION: `**Location**`,
        LOG_MODERATION_EMBED_MODERATOR: `**Moderator**`,
        LOG_MODERATION_EMBED_REASON: `**Reason**`,
        LOG_MODERATION_EMBED_TITLE: act => act === 'Clearedwarns' ? `Cleared warns for User` : `**${act} ${['Purged', 'Locked', 'Unlocked', 'Slowmoded'].includes(act) ? 'Channel' : 'User'}**`,
        LOG_MODERATION_KICKED: tar => `Kicked ${tar}`,
        LOG_MODERATION_LOCKED: `Locked Channel`,
        LOG_MODERATION_NOREASON: `No reason specified`,
        LOG_MODERATION_NUKED: `Nuked Channel`,
        LOG_MODERATION_PURGED: `Purged Messages`,
        LOG_MODERATION_SLOWMODED: `Slowmode Set`,
        LOG_MODERATION_UNBANNED: tar => `Unbanned ${tar}`,
        LOG_MODERATION_UNLOCKED: `Unlocked Channel`,
        LOG_MODERATION_VCKICKED: tar => `Vckicked ${tar}`,
        LOG_MODERATION_VCMUTED: tar => `Vcmuted ${tar}`,
        LOG_MODERATION_WARNED: tar => `Warned ${tar}`,

        // Monitors
        // Resolvers

        // Tasks
        TASK_AFK_EMBED_AUTHOR: user => `${user} is set as AFK`,
        TASK_AFK_EMBED_DESCRIPTION: reason => `**Reason**: ${reason}`,
        TASK_AFK_WELCOMEBACK: `Hey welcome back, I'll remove that afk for you.`,
        TASK_DISBOARD_DEFAULT_DISBOARDMESSAGE: `Time to bump the server on disboard. Use the command \`!d bump\` then come back in **two hours**.`,
        TASK_DISBOARD_EMBED_TITLE: `Reminder to Bump`,
        TASK_REMINDER: (time, reason) => `Hey there, here's that reminder you scheduled **${time}** ago for: **${reason}**.`,
        TASK_REMINDER_FOR: user => `Reminder For ${user}`,

        // 8 Ball
}